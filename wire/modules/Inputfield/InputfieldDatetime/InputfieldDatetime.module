<?php

/**
 * ProcessWire Datetime Inputfield
 *
 * Provides input for date and optionally time values. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class InputfieldDatetime extends Inputfield {

	const defaultDateInputFormat = 'Y-m-d';

	const datepickerNo = 0;		// no datepicker
	const datepickerClick = 1;	// datepicker on click
	const datepickerInline = 2; 	// inline datepicker, always visible (no timepicker support)
	const datepickerFocus = 3; 	// datepicker on field focus

	public static function getModuleInfo() {
		return array(
			'title' => __('Datetime', __FILE__), // Module Title
			'summary' => __('Inputfield that accepts date and optionally time', __FILE__), // Module Summary
			'version' => 103,
			'permanent' => true, 
			);
	}

	/**
	 * Initialize the date/time inputfield
	 *
	 */
	public function init() {
		$this->attr('type', 'text'); 
		$this->attr('size', 25); 
		$this->set('dateInputFormat', self::defaultDateInputFormat);
		$this->set('timeInputFormat', '');
		$this->set('datepicker', self::datepickerFocus); 
		$this->set('defaultToday', 0); 

		if($this->languages) foreach($this->languages as $language) {
			// account for alternate formats in other languages
			if($language->isDefault()) continue; 
			$this->set("dateInputFormat$language", '');
			$this->set("timeInputFormat$language", '');
		}

		parent::init();
	}

	/**
	 * Render the date/time inputfield
	 *
	 */
	public function ___render() {

		$dateFormat = '';
		$timeFormat = '';
		if($this->languages && !$this->user->language->isDefault()) {
			// check if alternate language formats are provided
			$dateFormat = $this->get("dateInputFormat{$this->user->language}"); 
			$timeFormat = $this->get("timeInputFormat{$this->user->language}"); 
		}
		if(!$dateFormat) $dateFormat = $this->dateInputFormat; 
		if(!$timeFormat) $timeFormat = $this->timeInputFormat; 
		$useTime = false; 

		if($this->datepicker) {
			$this->attr('class', "InputfieldDatetimeDatepicker InputfieldDatetimeDatepicker{$this->datepicker}"); 
			if(strlen($timeFormat) && $this->datepicker != self::datepickerInline) {
				// add in the timepicker script, if applicable
				$useTime = true; 
				$this->config->scripts->add($this->config->urls->InputfieldDatetime . 'jquery-ui-timepicker-addon.js');
			}
		}

		$attrs = $this->getAttributes();
		$value = $attrs['value'];
		$valueTS = (int) $value*1000; // TS=for datepicker/javascript, which uses milliseconds rather than seconds
		unset($attrs['value']); 

		if(!$value && $this->defaultToday) {
			$value = date($dateFormat);
			if($useTime) $value .= ' ' . date($timeFormat); 
			$valueTS = time()*1000; 

		} else if($value) {
			$value = trim(date($dateFormat . ' ' . $timeFormat, (int) $value)); 
		}

		$value = htmlspecialchars($value, ENT_QUOTES, 'UTF-8'); 

		$dateFormatJS = htmlspecialchars(FieldtypeDatetime::convertDateFormat($dateFormat, 'js'), ENT_QUOTES, 'UTF-8'); 
		$timeFormatJS = $useTime ? FieldtypeDatetime::convertDateFormat($timeFormat, 'js') : '';

		if(strpos($timeFormatJS, 'h24') !== false) {
			// 24 hour format. timepicker has no codes to represent it, so we identify and convert it to a variable
			$timeFormatJS = str_replace('h24', 'h', $timeFormatJS); 
			$ampm = 0; 
		} else {
			$ampm = 1;
		}

		if(strlen($timeFormatJS)) $timeFormatJS = htmlspecialchars($timeFormatJS, ENT_QUOTES, 'UTF-8'); 
		if(empty($value)) $value = '';

		$out = 	"\n<p>" . 
			"<input " . $this->getAttributesString($attrs) . " " . 
			"value='$value' " . 
			"data-dateformat='$dateFormatJS' " . 
			"data-timeformat='$timeFormatJS' " . 
			"data-ts='$valueTS' " . 
			"data-ampm='$ampm' " . 
			"/></p>"; 

		return $out; 
	}

	/**
	 * Capture setting of the 'value' attribute and convert string dates to unix timestamp
	 *
	 */
	public function setAttribute($key, $value) {
		if($key == 'value') {
			$value = FieldtypeDatetime::stringToTimestamp($value, $this->dateInputFormat . ' ' . $this->timeInputFormat); 
		}
		return parent::setAttribute($key, $value); 
	}

	/**
	 * Date/time Inputfield configuration, per field
	 *
	 */
	public function ___getConfigInputfields() {

		$inputfields = parent::___getConfigInputfields();
		$languages = wire('languages');

		$f = $this->modules->get('InputfieldInteger');
		$f->setAttribute('name', 'size'); 
		$f->label = $this->_('Size');
		$f->attr('value', $this->attr('size')); 
		$f->attr('size', 4); 
		$f->description = $this->_('The displayed width of this field (in characters).'); 
		$inputfields->append($f);

		$f= $this->modules->get('InputfieldRadios');
		$f->label = $this->_('Date Picker');
		$f->setAttribute('name', 'datepicker'); 
		$f->addOption(self::datepickerNo, $this->_('No date/time picker')); 
		$f->addOption(self::datepickerClick, $this->_('Date/time picker on button click')); 
		$f->addOption(self::datepickerFocus, $this->_('Date/time picker on field focus')); 
		$f->addOption(self::datepickerInline, $this->_('Inline date picker always visible (no time picker)')); 
		$f->attr('value', (int) $this->datepicker); 
		$inputfields->append($f);

		$fieldset = $this->modules->get('InputfieldFieldset'); 
		$fieldset->label = $this->_('Date/Time Input Formats');  

		$f = $this->modules->get('InputfieldSelect');
		$f->attr('name', '_dateInputFormat');
		$f->label = $this->_('Date Input Format');
		$f->description = $this->_('Select the format to be used for user input to this field. Your selection will populate the field below this, which you may customize further if needed.');
		$f->addOption('', $this->_('None'));
		$date = strtotime('2012-04-08 5:10:02 PM');
		foreach(FieldtypeDatetime::getDateFormats() as $format) {
			$dateFormatted = FieldtypeDatetime::formatDate($date, $format);
			if($format == 'U') $dateFormatted .= " (unix timestamp)";
			$f->addOption($format, $dateFormatted);
			if($this->dateInputFormat == $format) $f->attr('value', $format);
		}
		$f->attr('onchange', "$('#Inputfield_dateInputFormat').val($(this).val());");
		$fieldset->add($f);

		$f = $this->modules->get('InputfieldSelect');
		$f->attr('name', '_timeInputFormat');
		$f->label = $this->_('Time Input Format');
		$f->addOption('', $this->_('None'));
		$f->description = $this->_('Select an optional time format to be used for input. If used, the calendar option will include a time picker.'); 
		foreach(FieldtypeDatetime::getTimeFormats() as $format) {
			$timeFormatted = FieldtypeDatetime::formatDate($date, $format);
			$f->addOption($format, $timeFormatted);
			if($this->timeInputFormat == $format) $f->attr('value', $format);
		}
		$f->attr('onchange', "$('#Inputfield_timeInputFormat').val($(this).val());");
		$f->collapsed = Inputfield::collapsedBlank;
		$fieldset->add($f);

		$f = $this->modules->get("InputfieldText");
		$f->attr('name', 'dateInputFormat');
		$f->attr('value', $this->dateInputFormat ? $this->dateInputFormat : self::defaultDateInputFormat);
		$f->attr('size', 20);
		$f->label = "Date Input Format Code";
		$f->description = $this->_('This is automatically built from the date select above, unless you modify it.'); 
		$notes = $this->_('See the [PHP date](http://www.php.net/manual/en/function.date.php) function reference for more information on how to customize these formats.'); 
		if($languages) $notes .= "\n" . $this->_('You may optionally specify formats for other languages here as well. Any languages left blank will inherit the default setting.'); 
		$f->notes = $notes; 
		$f->collapsed = Inputfield::collapsedYes;
		$f1 = $f;
		$fieldset->add($f);

		$f = $this->modules->get("InputfieldText");
		$f->attr('name', 'timeInputFormat');
		$f->attr('value', $this->timeInputFormat ? $this->timeInputFormat : '');
		$f->attr('size', 20);
		$f->label = "Time Input Format Code";
		$f->description = $this->_('This is automatically built from the time select above, unless you modify it.'); 
		$f->notes = $notes; 
		$f->collapsed = Inputfield::collapsedYes;
		$f2 = $f;

		if($languages) {
			$f1->useLanguages = true; 
			$f2->useLanguages = true; 
			foreach($languages as $language) {
				if($language->isDefault()) continue; 
				$f1->set("value$language", (string) $this->get("dateInputFormat$language")); 	
				$f2->set("value$language", (string) $this->get("timeInputFormat$language")); 	
			}
		}

		$fieldset->add($f1);
		$fieldset->add($f2);
		$inputfields->add($fieldset); 

		$f= $this->modules->get('InputfieldCheckbox');
		$f->setAttribute('name', 'defaultToday'); 
		$f->attr('value', 1); 
		if($this->defaultToday) $f->attr('checked', 'checked'); 
		$f->label = $this->_("Default to today's date?");
		$f->description = $this->_("If checked, this field will hold the current date when no value is entered."); // Default today description
		$inputfields->append($f);

		return $inputfields; 
	}
	
}
