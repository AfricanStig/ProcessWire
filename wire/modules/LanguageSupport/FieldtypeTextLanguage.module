<?php

require_once(dirname(__FILE__) . '/FieldtypeLanguageInterface.php'); 

/**
 * Multi-language capable text field
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeTextLanguage extends FieldtypeText implements FieldtypeLanguageInterface {

	public static function getModuleInfo() {
		return array(
			'title' => 'Text (Multi-language)',
			'version' => 100,
			'summary' => 'Field that stores a single line of text in multiple languages',
			'permanent' => false,
			'requires' => 'LanguageSupport',
			);
	}

	/**
	 * Prevent multi-language fields from being auto-joined
	 *
	 */
	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query) {
		return null;
	}

	/**
	 * Sanitize value for storage
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		if(is_object($value) && $value instanceof LanguagesPageFieldValue) {
			// great, already what we wanted
		} else {
			// convert it to a LanguagesPageFieldValue
			$str = (string) $value; 
			$value = $page->getUnformatted($field->name); 
			$value->setLanguageValue(wire('user')->language->id, $str); 
		}
		return $value; 
	}

        /**
         * Return the database schema in specified format
         *
         */
        public function getDatabaseSchema(Field $field) {
 
                $schema = parent::getDatabaseSchema($field);
		$languages = wire('languages'); 

		foreach($languages as $language) {
			if($language->isDefault) continue; 
			$schema['data' . $language->id] = $schema['data']; 
			$schema['keys']["data_exact{$language->id}"] = "KEY `data_exact{$language->id}` (`data{$language->id}`(255))";
			$schema['keys']["data{$language->id}"] = "FULLTEXT KEY `data{$language->id}` (`data{$language->id}`)";
		}

                return $schema;
        }

	/**
	 * Format value for output, basically typcasting to a string and sending to textformatters from FieldtypeText
	 *
	public function formatValue(Page $page, Field $field, $value) {
		return parent::formatValue($page, $field, (string) $value); 
	}
	 */


	/**
	 * Convert the loaded value to a LanguagesPageFieldValue instance
	 *
	public function ___loadPageField(Page $page, Field $field) {
		try {
			$values = parent::___loadPageField($page, $field); 
		} catch(Exception $e) {
			// just catch
			$values = array();
		}
		$str = new LanguagesPageFieldValue($values); 
		return $str; 
	}
	 */

	/**
	 * Convert an array value from the DB to a LanguagePageFieldValue
	 *
	public function ___wakeupValue(Page $page, Field $field, $value) {
		if(is_array($value)) $value = new LanguagesPageFieldValue($value); 
		return $value;
	}
	 */


	/**
	 * Convert the LanguagesPageFieldValue instance to an array indexed by DB column
	 *
	public function ___sleepValue(Page $page, Field $field, $value) {
		$values = array();
		foreach(wire('languages') as $language) {
			if($language->isDefault) $key = 'data';
				else $key = 'data' . $language->id; 
			$values[$key] = $value->getLanguageValue($language->id); 
			
		}
		return $values; 
	}
	 */

	/**
	 * Update a query to match the text with a fulltext index
	 *
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		$user = wire('user'); 
		$query = parent::getMatchQuery($query, $table, $subfield, $operator, $value); // data or data1234

		
		//if($subfield == 'data' && !$user->language->isDefault) {
		//	$subfield .= $user->language->id; // and data1234
		//	$query = parent::getMatchQuery($query, $table, $subfield, $operator, $value); 
		//}
		return $query;
	}
	 */


}
