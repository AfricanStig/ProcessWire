<?php

/**
 * Main multi-language support module
 *
 * This module is the front door to all the other language modules and files. 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class LanguageSupport extends WireData implements Module, ConfigurableModule {

	/**
	 * Return information about the module
	 *
	 */
        static public function getModuleInfo() {
                return array(
                        'title' => 'Languages Support',
                        'version' => 100,
                        'summary' => 'ProcessWire multi-language support. Installing this module will install the rest.',
			'autoload' => true,
			'singular' => true
                        );
        }

	/**
	 * Name of template used for language pages
	 *
	 */
	const languageTemplateName = 'language';

	/**
	 * Name of field used to store the language page ref
	 *
	 */
	const languageFieldName = 'language';

	/**
 	 * This module can possibly be init'd before PW's Modules class fully loads, so we keep this to prevent double initialization
	 *
	 */
	protected $initialized = false; 

	/**
	 * Construct and set our dynamic config vars
	 *
	 */
	public function __construct() {

		// load other required classes
		$dirname = dirname(__FILE__); 
		require_once($dirname . '/Language.php'); 
		require_once($dirname . '/Languages.php'); 
		require_once($dirname . '/LanguageTranslator.php'); 
		require_once($dirname . '/FieldtypeLanguageInterface.php'); 

		// set our config var placeholders
		$this->set('languagesPageID', 0); 
		$this->set('systemLanguagePageID', 0); 
		$this->set('defaultLanguagePageID', 0); 
		$this->set('languageTranslatorPageID', 0); 
	}

	/**
	 * Initialize the language support API vars
	 *
	 */
	public function init() {

		// prevent possible double init
		if($this->initialized) return; 
		$this->initialized = true; 

		$defaultLanguagePage = null;
		$systemLanguagePage = null;
		$defaultLanguagePageID = $this->defaultLanguagePageID; 
		$systemLanguagePageID = $this->systemLanguagePageID; 

		// create the $languages API var
		$languages = new Languages($this->templates->get('language'), $this->languagesPageID); 
		Wire::setFuel('languages', $languages); 

		// ensure all languages are loaded and get instantiated versions of system/default languages
		foreach($this->languages as $language) {
			if($language->id == $defaultLanguagePageID) $defaultLanguagePage = $language; 
			if($language->id == $systemLanguagePageID) $systemLanguagePage = $language; 
		}

		// if the defaultLanguagePage is no longer available (deleted?), make it the system language
		if(!$defaultLanguagePage) $defaultLanguagePage = $systemLanguagePage; 
		$systemLanguagePage->setIsSystemLanguage();
		$defaultLanguagePage->setIsDefaultLanguage();

		// identify the current language from the user, or set one if it's not already
		if($this->user->language && $this->user->language->id) {
			$language = $this->user->language; 
		} else {
			$language = $defaultLanguagePage; 
			$this->user->language = $language; 
		}

		wire('config')->dateFormat = $this->_('Y-m-d H:i:s'); // Sortable date format used in the admin
		setlocale(LC_ALL, $this->_('C')); // Value to pass to PHP's setlocale(LC_ALL, 'value') function when initializing this language // Default is: C

		// setup our hooks handled by this class
		$this->addHookAfter('Inputfield::render', $this, 'hookInputfieldRender'); 
		$this->addHookAfter('Inputfield::processInput', $this, 'hookInputfieldProcessInput'); 
		$this->addHookAfter('Field::getInputfield', $this, 'hookFieldGetInputfield'); 
		$this->pages->addHook('added', $this, 'hookPageAdded'); 
		$this->pages->addHook('deleted', $this, 'hookPageDeleted'); 

		// styles used by our Inputfield hooks
		$this->config->styles->add($this->config->urls->LanguageSupport . "LanguageSupport.css"); 
	}

	/**
	 * Hook into Inputfield::render to duplicate inputs for other languages
	 *
	 */
	public function hookInputfieldRender(HookEvent $event) {

		$inputfield = $event->object; 
		if(!$inputfield->useLanguages) return; 

		// originals
		$name = $inputfield->attr('name');
		$id = $inputfield->attr('id');
		$value = $inputfield->attr('value');

		$trackChanges = $inputfield->trackChanges(); 
		$inputfield->setTrackChanges(false); 
		$out = '';

		foreach(wire('languages') as $language) {
			$languageID = (int) $language->id; 

			if($languageID == $this->defaultLanguagePageID) {
				// default language
				$newID = $id;

				if(is_null($inputfield->get('value' . $languageID))) { 
					// value for default language is specified in 'value' attribute, so use existing rendering
					$o = $event->return; 
				} else {
					// value for default language is specified in a value{id} property, so re-render it
					$valueAttr = "value$languageID";
					$inputfield->setAttribute('value', $inputfield->$valueAttr); 
					$o = $inputfield->___render(); 
					
				}

			} else {
				// non-default language
				$newID = $id . "__$languageID";
				$newName = $name . "__$languageID";
				$inputfield->attr('id', $newID); 
				$inputfield->attr('name', $newName); 
				$valueAttr = "value$languageID";
				$inputfield->setAttribute('value', $inputfield->$valueAttr); 
				$o = $inputfield->___render(); 
			}

			$o = 	"\n<div class='LanguageSupport'>" . 
				"\n\t<label for='$newID' class='LanguageSupportLabel detail'>{$language->title}</label>" . 
				str_replace("\n", "\n\t", $o) . 
				"\n</div>";

			$out .= $o;
		}

		$inputfield->setAttribute('name', $name);
		$inputfield->setAttribute('id', $id);
		$inputfield->setAttribute('value', $value);
		$inputfield->setTrackChanges($trackChanges); 

		$event->return = $out; 
	}

	/**
	 * Hook into Inputfield::processInput to process input for other languages
	 *
	 */
	public function hookInputfieldProcessInput(HookEvent $event) {

		$inputfield = $event->object; 
		if(!$inputfield->useLanguages) return;
		$post = $event->arguments[0];

		// originals
		$name = $inputfield->attr('name');
		$id = $inputfield->attr('id');
		$value = $inputfield->attr('value');

		foreach(wire('languages') as $language) {
			$languageID = (int) $language->id; 	
			if($languageID == $this->defaultLanguagePageID) continue; 
			$newID = $id . "__$languageID";
			$newName = $name . "__$languageID";
			$inputfield->setTrackChanges(false);
			$inputfield->attr('id', $newID); 
			$inputfield->attr('name', $newName); 
			$valueAttr = "value$languageID";
			$inputfield->setAttribute('value', $inputfield->$valueAttr); 
			$inputfield->setTrackChanges(true);
			$inputfield->___processInput($post);
			$inputfield->set($valueAttr, $inputfield->attr('value')); 
			// $this->message($valueAttr . ': ' . $inputfield->attr('value')); 
		}

		$inputfield->setTrackChanges(false);
		$inputfield->setAttribute('name', $name);
		$inputfield->setAttribute('id', $id);
		$inputfield->setAttribute('value', $value);
		$inputfield->setTrackChanges(true); 
		$inputfield->trackChange('value'); 

	}

	/**
	 * Hook into Field::getInputfield to change label/description to proper language
	 *
	 */
	public function hookFieldGetInputfield(HookEvent $event) {

		$language = wire('user')->language; 
		if(!$language) return; 

		$field = $event->object; 
		$inputfield = $event->return; 
		$translatable = array('label', 'description', 'notes');

		// populate language versions where available
		foreach($translatable as $key) {
			$langKey = $key . $language->id; // i.e. label1234
			$value = $field->$langKey; 
			if(!$value) continue; 
			$inputfield->$key = $value;
		}

		$event->return = $inputfield; 
	}

	/**
	 * Hook called when new language added
	 *
	 */
	public function hookPageAdded(HookEvent $event) {
		$page = $event->arguments[0];
		if(!$page instanceof Language) return;

		foreach(wire('fields') as $field) { 
			if($field->type instanceof FieldtypeLanguageInterface) $field->type->languageAdded($field, $language); 
		}

		// trigger hook in $languages
		wire('languages')->added($page);
	}

	/**
	 * Hook called when language is deleted
	 *
	 */
	public function hookPageDeleted(HookEvent $event) {
		$page = $event->arguments[0];
		if(!$page instanceof Language) return;

		// remove any language-specific values from any fields
		foreach(wire('fields') as $field) {
			$changed = false;
			foreach(array('label', 'description', 'notes') as $name) {
				$name = $name . $page->id;	
				if(!isset($field->$name)) continue;
				$field->remove($name);
				$this->message("Removed {$page->name} $name from field {$field->name}"); 
				$changed = true;
			}
			if($changed) $field->save();
			if($field->type instanceof FieldtypeLanguageInterface) $field->type->languageRemoved($field, $language); 
		}

		foreach(wire('templates') as $template) {
			$name = 'label' . $page->id; 
			if(isset($template->$name)) {
				$template->remove($name); 
				$template->save();
				$this->message("Removed {$page->name} label from template {$template->name}"); 
			}
		}

		// trigger hook in $languages
		wire('languages')->deleted($page);

	}

	/**
	 * Module configuration screen
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {

		$form = new InputfieldWrapper();

		/*
		$field = wire('modules')->get('InputfieldInteger'); 
		$field->attr('id+name', 'languagesPageID'); 
		$field->attr('value', $data['languagesPageID']); 
		$field->label = "Languages Page ID";
		$form->add($field); 

		$field = wire('modules')->get('InputfieldInteger'); 
		$field->attr('id+name', 'systemLanguagePageID'); 
		$field->attr('value', $data['systemLanguagePageID']); 
		$field->label = "System Language Page ID (for English)";
		$form->add($field); 

		$field = wire('modules')->get('InputfieldInteger'); 
		$field->attr('id+name', 'defaultLanguagePageID'); 
		$field->attr('value', $data['defaultLanguagePageID']); 
		$field->label = "Default Language Page ID";
		$form->add($field); 

		$field = wire('modules')->get('InputfieldInteger'); 
		$field->attr('id+name', 'languageTranslatorPageID'); 
		$field->attr('value', $data['languageTranslatorPageID']); 
		$field->label = "Translator Page ID";
		$form->add($field); 
		*/

		$field = wire('modules')->get('InputfieldRadios'); 
		$field->attr('id+name', 'defaultLanguagePageID'); 

		foreach(wire('languages') as $language) {
			$field->addOption($language->id, $language->title . " ({$language->name})");
		}

		$field->attr('value', (int) $data['defaultLanguagePageID']); 
		$field->label = "Default Language Page";
		$field->description = "Select the language that this site is produced in.";
		$form->add($field); 


		return $form; 
	}

	/**
	 * Install or uninstall by loading the LanguageSupportInstall script
	 *
	 */
	protected function installer($install = true) {
		require_once($this->config->paths->LanguageSupport . 'LanguageSupportInstall.php'); 
		$installer = new LanguageSupportInstall();
		if($install) $installer->install();
			else $installer->uninstall();
	}

	/**
	 * Install the module
	 *
	 */
	public function ___install() {
		$this->installer(true); 
	}

	/**
	 * Uninstall the module
	 *
	 */
	public function ___uninstall() {
		$this->installer(false);
	}

}
