<?php

/**
 * ProcessWire Session Viewer
 *
 * This module accompanies installation of the SessionHandlerDB module
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessSessionDB extends Process {

	public static function getModuleInfo() {
		return array(
			'title' => __('Sessions', __FILE__), // getModuleInfo title          
			'summary' => __('Enables you to browse active database sessions.', __FILE__), // getModuleInfo summary 
			'version' => 1, 
			'permanent' => false, 
			'requires' => array('SessionHandlerDB'),
			);
	}

	const pageName = 'sessions-db';

	public function init() {
		return parent::init();
	}

	public function ___execute() {

		$form = wire('modules')->get('InputfieldForm');
		$markup = wire('modules')->get('InputfieldMarkup');
		$pagePaths = array();
		$userNames = array();
		$table = SessionHandlerDB::dbTableName;
		$sql = "SELECT user_id, pages_id, ts FROM $table ORDER BY ts DESC LIMIT 1000";
		$result = wire('db')->query($sql);

		if($result->num_rows) {

			$table = wire('modules')->get('MarkupAdminDataTable');
			$table->headerRow(array(
				__('Time'), 
				__('User'), 
				__('Page')
				)); 

			while($row = $result->fetch_row()) {
				list($user_id, $pages_id, $ts) = $row; 

				if(isset($userNames[$user_id])) {
					$userName = $userNames[$user_id]; 

				} else {
					$user = wire('users')->get($user_id);
					$userName = $user && $user->id ? $user->name : '.';
					$userNames[$user_id] = $userName;
				}

				if(isset($pagePaths[$pages_id])) {
					$pagePath = $pagePaths[$pages_id]; 

				} else {
					$page = wire('pages')->get($pages_id);
					$pagePath = $page->id ? $page->path : '.';
					$pagePaths[$pages_id] = $pagePath;
				}

				$table->row(array($ts, $userName, $pagePath));
			}
			
			$form->value = $table->render();

		} else {
			$form->value = __('No active sessions');
		}

		$submit = wire('modules')->get('InputfieldSubmit');
		$submit->attr('value', $this->_('Refresh'));
		$submit->attr('id+name', 'submit_session');
		$form->add($submit);

		$result->free();
		return $form->render();
	}	

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned. 
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}");
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed. 
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}");
			$page->delete();
		}
	}


}

