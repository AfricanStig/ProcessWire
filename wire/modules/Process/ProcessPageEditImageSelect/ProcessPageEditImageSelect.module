<?php

/**
 * ProcessWire Image Select + Edit Process
 *
 * Provides the image selecting and editing capability for rich text editors (TinyMCE/CKEditor)
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessPageEditImageSelect extends Process implements ConfigurableModule {
	
	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Image',
			'summary' => 'Provides an image select capability as used by some Fieldtype modules (like TinyMCE)',
			'version' => 111,
			'permanent' => true,
			'permission' => 'page-edit',
		);
	}
	
	protected $maxImageWidth = 835; 
	protected $page = null;
	protected $editorPage = null;
	protected $defaultClass = 'Pageimage';
	protected $file = '';
	protected $editWidth = 0;
	protected $editHeight = 0;
	protected $hidpi = false;
	protected $extensions = 'jpg|jpeg|gif|png|svg';

	protected static $defaultConfig = array(
		'hidpiDefault' => 0, 
		'skipFields' => '',
		'noSizeAttrs' => 0,
		'noThumbs' => 0, 
		'alignLeftClass' => 'align_left',
		'alignRightClass' => 'align_right',
		'alignCenterClass' => 'align_center',
		);

	/**
	 * Construct and set default configuration
	 * 
	 */
	public function __construct() {
		foreach(self::$defaultConfig as $key => $value) $this->set($key, $value); 
	}

	/**
	 * Initialize and populate required variables from GET variables
	 * 
	 * @throws WireException
	 * 
	 */
	public function init() {

		if($this->config->demo) throw new WireException("Sorry, image editing functions are disabled in demo mode"); 
		
		$this->modules->get("ProcessPageList");
		
		$id = (int) $this->input->get->id; 
		$editID = (int) $this->input->get->edit_page_id; 
		
		if($editID) {
			$this->wire('session')->set($this, 'edit_page_id', $editID); 
		} else {
			$editID = (int) $this->wire('session')->get($this, 'edit_page_id'); 
		}
		
		if($editID) {
			$this->editorPage = $this->wire('pages')->get($editID); 
			if(!$this->editorPage->editable()) {
				$this->editorPage = null;
				$this->wire('session')->remove($this, 'edit_page_id'); 
			}
		}
		
		// if no ID was specified, then retrieive ID from filename path, if it's there
		if($this->input->get->file && preg_match('{[/,]}', $this->input->get->file)) {
			
			if(preg_match('{(\d+)[/,][^/,]+\.(' . $this->extensions . ')$}iD', $this->input->get->file, $matches)) {
				// ..........ID.../,filename.ext
				// format: 123/filename.jpg OR 123,filename.jpg
				// also covers new pagefileSecure URLs
				$id = (int) $matches[1]; 
				
			} else if(preg_match('{(/[\d/]+)/([-_.a-z0-9]+)\.(' . $this->extensions . ')$}iD', $this->input->get->file, $matches)) {
				// .................ID........filename........ext
				// extended asset path format: 1/2/3/filename.jpg
				$id = PagefilesManager::dirToPageID($matches[1]); 

			} else if(preg_match('{^' . wire('config')->urls->root . '([-_./a-zA-Z0-9]*/)' . wire('config')->pagefileUrlPrefix . '[^/]+\.(' . $this->extensions . ')$}iD', $this->input->get->file, $matches)) {
				// .............................../....................path/to/page.........................-?....................filename..........ext
				// legacy pagefileSecure URL format: /path/to/page/filename.jpg
				// @todo: does this still need to be here or can it be dropped?
				$this->page = wire('pages')->get('/' . $matches[1]);
				$id = $this->page->id;
			}
		}
		
		if(!$id) throw new WireException("No page specified");
		if(!$this->page) $this->page = $this->pages->get($id); 
		if(!$this->page) throw new WireException("No page specified"); 
		if(!$this->page->id) throw new WireException("Unknown page"); 
		if(!$this->editorPage) $this->editorPage = $this->page; 
		
		// note we use hasPermission('page-view') rather than viewable() here becuase we want to allow pages without template files
		if(!$this->user->hasPermission('page-view', $this->page)) throw new WireException("You do not have access to images on this page"); 

		if($this->input->get->winwidth) $this->maxImageWidth = ((int) $this->input->get->winwidth) - 70; 
		if($this->maxImageWidth < 400) $this->maxImageWidth = 400; 
		
		$this->hidpi = ((int) $this->wire('input')->get('hidpi')) ? true : false;
		$hidpi = $this->wire('input')->get('hidpi');
		if($hidpi === null && $this->hidpiDefault) $hidpi = true; 
		$this->hidpi = $hidpi ? true : false;

		parent::init();
	}

	/**
	 * Return the Pageimage object being edited
	 * 
	 * @return Pageimage
	 * @throws WireException
	 * 
	 */
	public function getPageimage() {

		$images = $this->getImages($this->page);
		$filename = basename($this->input->get->file); 
		if(strpos($filename, ',') === false) $filename = $this->page->id . ',' . $filename; // prepend ID if it's not there, needed for ajax in-editor resize
		if(!preg_match('/\.(' . $this->extensions . ')$/iD', $filename, $matches)) throw new WireException("Unknown image file"); 

		// get the original, non resized version, if present
		if(preg_match('/(\.(\d+)x(\d+)(-[-_a-z0-9]+)?)\.' . $matches[1] . '$/', $filename, $matches)) {
			// original.600x400-suffix1-suffix2.ext
			$this->editWidth = (int) $matches[2];
			$this->editHeight = (int) $matches[3]; 
			$filename = str_replace($matches[1], '', $filename); // remove dimensions and optional suffix
		}
		if(!array_key_exists($filename, $images)) throw new WireException("Invalid image file: $filename"); 
		return $images[$filename]; 
	}

	/**
	 * Get all Pageimage objects on page
	 * 
	 * @param Page $page
	 * @param int $level Recursion level (internal use)
	 * @return array
	 * 
	 */
	public function getImages(Page $page, $level = 0) {

		$allImages = array();
		$numImages = 0;
		$numImageFields = 0;
		$skipFields = explode(' ', $this->skipFields); 

		if(!$page->id) return $allImages; 

		foreach($page->fields as $field) {

			if(in_array($field->name, $skipFields)) continue; 

			if($field->type instanceof FieldtypeRepeater) {
				// get images that are possibly in a repeater
				foreach($page->get($field->name) as $p) {
					$images = $this->getImages($p, $level+1); 
					if(!count($images)) continue; 
					$allImages = array_merge($allImages, $images);
					$numImages += count($images); 
					$numImageFields++;
				}
				continue; 
			}

			if(!$field->type instanceof FieldtypeImage) continue; 
			$numImageFields++;
			$images = $page->get($field->name); 
			if(!count($images)) continue; 

			foreach($images as $image) {
				$numImages++;
				$key = $page->id . ',' . $image->basename;  // page_id,basename for repeater support
				$allImages[$key] = $image; 
			}
		}

		if(!$level) {
			if(!$numImageFields) $this->message($this->_("There are no image fields on this page. Choose another page to select images from.")); // Message when page has no image fields
				else if(!$numImages) $this->message($this->_("There are no images present on this page. Close this window and upload images, or select images from another page."));  // Message when page has no images
		}

		return $allImages; 
	}

	/**
	 * Default execute: display list of images on page for selection
	 * 
	 * @return string
	 * @throws WireException
	 * 
	 */
	public function ___execute() {

		if($this->config->demo) throw new WireException("Sorry, image editing functions are disabled in demo mode"); 
		if(!$this->page) {
			$error = "No page provided";
			$this->error($error);
			return "<p>$error</p>";
		}

		if($this->input->get->file) return $this->executeEdit();
		$images = $this->getImages($this->page);

		$out = '';

		if(count($images)) {
			$winwidth = (int) $this->input->get->winwidth;
			$in = $this->wire('modules')->get('InputfieldImage'); 
			$in->adminThumbs = true;
			
			foreach($images as $image) {
				if($this->noThumbs) {
					$width = $image->width();
					$alt = $this->wire('sanitizer')->entities1($image->description); 
					if($width > $this->maxImageWidth) $width = $this->maxImageWidth;
					$img = "<img src='$image->url' width='$width' alt=\"$alt\" />";
				} else {
					$info = $in->getAdminThumb($image); 
					$img = $info['markup'];
				}
				$out .= "\n\t<li><a href='./edit?file={$image->page->id},{$image->basename}&amp;modal=1&amp;id={$this->page->id}&amp;winwidth=$winwidth'>$img</a></li>";
			}

			$class = $this->noThumbs ? "" : " class='thumbs'";
			$out = "\n<ul id='select_images'$class>$out\n</ul>";

		}

		$form = $this->modules->get("InputfieldForm");
		$form->action = "./"; 
		$form->method = "get";

		$field = $this->modules->get("InputfieldPageListSelect"); 
		$field->label = $this->_("Images on Page:") . ' ' . $this->page->get("title") . " (" . $this->page->path . ")"; // Headline for page selection, precedes current page title/url
		$field->description = $this->_("If you would like to select images from another page, select the page below."); // Instruction on how to select another page
		$field->attr('id+name', 'page_id'); 
		$field->value = $this->page->id; 
		$field->parent_id = 0; 
		$field->collapsed = count($images) ? Inputfield::collapsedYes : Inputfield::collapsedNo;
		$field->required = true; 
		$form->append($field); 
		
		$out = $form->render() . $out;

		return "<div id='ProcessPageEditImageSelect'>" . $out . "\n</div>";
	}

	/**
	 * Edit a selected image
	 * 
	 * Required GET variables:
	 * 	- file (string): URL of image
	 * 	- edit_page_id (int): ID of the page being edited, where image will be placed.
	 *
	 * Optional GET variables:
	 * 	- width (int): Current width of image in the editor
	 * 	- height (int): Current height of image in the editor
	 * 	- winwidth (int): Current width of client-side window in pixels
	 * 	- id (int): ID of the page the image lives on (if omitted, we attempt to determine from 'file' path).
	 * 	- class (string): Class name to pass along to the editor (i.e. align_left, align_right, etc.)
	 * 	- hidpi (int): Whether hidpi mode is used or not (0=no, 1=yes)
	 * 
	 * @return string
	 * @throws WireException
	 * 
	 */
	public function ___executeEdit() {

		$attrs = array(
			'class' => '', 
			'width' => 0,
			'height' => 0, 
			); 
		$image = $this->getPageimage();
		if(!is_file($image->filename)) throw new WireException("Image file does not exist"); 
		$basename = $image->basename;
		$fullname = $image->page->id . ',' . $basename; 

		$originalWidth = $image->width();
		$originalHeight = $image->height();

		$width = (int) $this->input->get->width; 
		$height = (int) $this->input->get->height; 
		if(!$width) $width = $this->editWidth; 
		if(!$width) $width = '';
		if(!$height) $height = $this->editHeight; 
		if(!$height) $height = '';

		// if they aren't already working with a resized image, and it's being scaled down,
		// then add the 'resized' class to ensure that our pwimage plugin knows to perform the resize
		if(basename($this->input->get->file) == $fullname && $originalWidth > $width) $attrs['class'] .= " resized";
		$hidpiChecked = $this->hidpi ? " checked='checked'" : "";

		$out =	
			"\n<form id='selected_image_settings' action='./?id={$this->page->id}&amp;file=$fullname'>" . 
			"\n\t<p id='wrap_info'>" . 
			"\n\t\t<span id='selected_image_filename'>" . htmlentities($basename, ENT_QUOTES, 'UTF-8') . "</span> &nbsp;&bull;&nbsp; " . 
			"\n\t\t<span id='selected_image_pixels'>" . 
			"\n\t\t\t<label>" . $this->_('Width:') . " <input id='input_width' class='input_pixels' type='number' size='6' step='1' min='1' max='$originalWidth' value='$width' /></label>&nbsp; " . 
			"\n\t\t\t<label>" . $this->_('Height:') . " <input id='input_height' class='input_pixels' type='number' size='6' step='1' min='1' max='$originalHeight' value='$height' /></label>" . 
			"\n\t\t</span>&nbsp; " . 
			"\n\t\t<span><label><input$hidpiChecked id='selected_image_hidpi' type='checkbox' value='1' /> " . $this->_('HiDPI/Retina') . "</label> " . 
			"\n\t</p>";

		$description = isset($_GET['description']) ? $this->input->get->description : $image->description; 
		if(strlen($description) > 1024) $description = substr($description, 0, 1024); 
		$description = htmlentities($description, ENT_QUOTES, "UTF-8"); 

		$descriptionLabel = $this->_('Description'); 

		$out .= 
			"\n\t<p id='wrap_description'>" . 
			"\n\t\t<label for='selected_image_description'>$descriptionLabel</label>" . 
			"\n\t\t<input type='text' placeholder='$descriptionLabel' name='selected_image_description' id='selected_image_description' class='no_focus' value=\"$description\" />" . 
			"\n\t</p>"; 

		$out .= 
			"\n\t<p id='wrap_class'>" . 
			"\n\t\t<select id='selected_image_class' name='class'>" . 
			"\n\t\t\t<option>" . $this->_('No Alignment') . "</option>"; 

		$optionalClasses = array(
			$this->alignLeftClass => $this->_('Align Left'),
			$this->alignRightClass => $this->_('Align Right'),
			$this->alignCenterClass => $this->_('Align Center'),
			);

		foreach($optionalClasses as $class => $label) {
			$selected = strpos($this->input->get('class'), $class) !== false ? " selected='selected'" : '';
			if($selected) $attrs['class'] .= " $class";
			$out .= "\n\t\t\t<option$selected value='$class'>$label</option>";
		}

		$out .= "\n\t\t</select> &nbsp; " .
			"\n\t\t<span class='detail'>" . $this->_("You can also drag the lower right corner of the image to resize.") . "</span>" . 
			"\n\t</p>"; 

		if(!$width && $image->width() > $this->maxImageWidth) {	
			$width = $this->maxImageWidth; 
			$height = floor(($width / $image->width()) * $image->height()); // $height = 0; 
		}

		if($width) $attrs['width'] = $width; 
		if($width && $height) $attrs['height'] = $height; 

		if($width != $originalWidth) { 
			$imgURL = str_replace($this->wire('config')->urls->root, '/', $image->url); 
			$imgLink = trim($this->input->get->link);
			if($imgLink) {
				$test = substr($imgLink, -1 * strlen($imgURL));
				$checked = $test == $imgURL ? " checked='checked' data-was-checked='1'" : "";
			} else {
				$checked = '';
			}
			$out .= 
				"\n\t<p id='wrap_link_original'>" . 
				"\n\t\t<label>" . 
				"\n\t\t\t<input type='checkbox'$checked name='selected_image_link' id='selected_image_link' value='{$image->url}' /> " . $this->_('Link to Larger Version?') . 
				"\n\t\t\t<span class='detail'>({$originalWidth}x{$originalHeight})</span> " . 
				"\n\t\t</label>" . 
				"\n\t</p>";
		}


		$out .= "\n\t<input type='hidden' name='page_id' id='page_id' value='{$this->page->id}' />";	
		$out .=	"\n</form>";

		$attrStr = '';
		foreach($attrs as $key => $value) if($value) $attrStr .= "$key='" . trim($value) . "' ";
		$nosize = $this->noSizeAttrs ? 1 : '';

		$out .= 
			"\n\t<div id='selected_image_container'>" . 
			"\n\t\t<img id='selected_image' $attrStr alt='' data-nosize='$nosize' data-idname='{$image->page->id},{$image->basename}' src='{$image->url}' />" . 
			"\n\t</div>";

		return $out; 
		
	}

	/**
	 * Resize image and output basic markup with information about the resize
	 * 
	 * The output is intended to be read by the rich text editor for insertion into the text. 
	 * 
	 * Required GET variables: 
	 * 	- file (string): URL of image
	 * 	- width (int): Target resize width
	 * 	- edit_page_id (int): ID of the page being edited, where image will be placed. 
	 * 
	 * Optional GET variables:
	 * 	- id (int): ID of the page the image lives on (if omitted, we attempt to determine from 'file' path). 
	 * 	- class (string): Class name to pass along to the editor (i.e. align_left, align_right, etc.) 
	 * 	- hidpi (int): Whether hidpi mode is used or not (0=no, 1=yes)
	 * 	- json (int): Specify 1 to provide output in JSON (if not specified, output is a paragraph of markup)
	 * 
	 * @return string
	 * @throws WireException
	 * 
	 */
	public function ___executeResize() {

		$width = (int) $this->input->get('width'); 
		$class = $this->sanitizer->name($this->input->get->class);
		$hidpi = $this->hidpi;
		$json = (int) $this->input->get('json'); // 1 or 0 (for json output mode on or off)
		
		if(strpos($class, 'hidpi') !== false) {
			if(!$hidpi) $hidpi = true; 
		} else {
			if($hidpi) $class = trim("$class hidpi");
		}
		
		$image = $this->getPageimage();
		
		if($width < $image->width) {
			$suffix = array('is');  // is=image select
			if($this->editorPage && $this->editorPage->id != $this->page->id) $suffix[] = "pid$this->editorPage"; // identify page that is using the variation
			$resized = $image->width($width, array('suffix' => $suffix, 'hidpi' => $hidpi)); 
			$height = $resized->height();
		} else {
			$width = $image->width; 
			$height = $image->height; 
			$resized = $image; 
		}
	
		if($hidpi) {
			$width = $resized->hidpiWidth();
			$height = $resized->hidpiHeight();
			$hidpiChecked = " checked='checked'";
		} else {
			$hidpiChecked = '';
		}

		$nosize = $this->noSizeAttrs ? 1 : '';
		
		if($json) {
			
			$data = array(
				'src' => $resized->url,
				'name' => $image->basename, 
				'width' => $width,
				'height' => $height, 
				'class' => $class, 
				'page' => $image->page->id,
				'hidpi' => $hidpi,
				'nosize' => $nosize, 
			);
			
			header("Content-Type: application/json"); 
			$out = json_encode($data); 
			
		} else {
			// note IE8 won't properly read the width/height attrs via ajax
			// so we provide the width/height in separate fields

			$out =
				"<p>" .
				"<span id='selected_image_width'>$width</span>x" .
				"<span id='selected_image_height'>$height</span> " .
				"<label><input type='checkbox' id='selected_image_hidpi'$hidpiChecked />hidpi</label><br />" .
				"<img id='selected_image' class='$class' data-idname='{$image->page->id},{$image->basename}' data-nosize='$nosize' src='{$resized->url}' width='$width' height='$height' />" .
				"</p>";
		}

		return $out; 
	}

	/**
	 * Show all variations for the image provided in GET var 'file'
	 * 
	 */
	public function ___executeVariations() {
		
		$pageimage = $this->getPageimage();
		
		if(!$this->page || !$pageimage) throw new WireException("No file provided"); 
		if(!$this->page->editable()) throw new WireException("Page is not editable"); 
		
		$variations = $pageimage->getVariations(array('info' => true));
		$cnt = count($variations);
		
		$delete = $this->wire('input')->post('delete'); 	
		if(is_array($delete) && count($delete)) {
			foreach($delete as $name) {
				if(!isset($variations[$name])) continue; 
				$info = $variations[$name]; 
				if(is_file($info['path']) && unlink($info['path'])) {
					$this->message($this->_('Deleted image variation') . " - $info[url]"); 
					unset($variations[$name]); 
				} else {
					$this->error($this->_('Error deleting image variation') . " - $info[url]"); 
				}
			}
		}
		
		$headline = sprintf(
				$this->_n('%1$d variation for image %2$s', '%1$d variations for image %2$s', $cnt), 
				$cnt, "<a class='preview' href='$pageimage->url'>$pageimage->basename</a>"
			);
		$this->headline($headline); 
		
		if(!$cnt) return "<h2>$headline</h2>";
		
		$adminThumbOptions = $this->wire('config')->adminThumbOptions;
		
		$table = $this->wire('modules')->get('MarkupAdminDataTable'); 
		$table->setEncodeEntities(false);
		$table->headerRow(array(
			$this->_x('Image', 'th'), 
			$this->_x('File', 'th'),
			$this->_x('Size', 'th'),
			$this->_x('Notes', 'th'),
			"<label><input type='checkbox' id='delete_all' value='1' /> <i class='fa fa-trash-o'></i></label>", 
		));
		
		foreach($variations as $name => $info) {
			
			$notes = array();
			if(in_array('is', $info['suffix'])) $notes[] = $this->_x('Created for placement in textarea', 'notes'); 
			if(in_array('hidpi', $info['suffix'])) $notes[] = $this->_x('HiDPI/Retina', 'notes'); 
			if(!count($notes) && $info['width'] == $adminThumbOptions['width'] && $info['height'] == $adminThumbOptions['height']) {
				$notes[] = $this->_x('Auto-generated admin thumbnail', 'notes'); 
			}
			if(!count($notes)) $notes[] = $this->_x('API-generated variation', 'notes');
		
			$width = (int) $info['width'];
			$height = (int) $info['height'];
			if(!$width || !$height) list($width, $height) = getimagesize($info['path']);
			$filesize = filesize($info['path']); 
			$filesizeStr = wireBytesStr($filesize);
			
			$table->row(array(
				"<a class='preview' href='$info[url]'><img src='$info[url]' alt='$name' style='max-width: 100px;' /></a>",
				"<a class='preview' href='$info[url]'>$name</a><br /><span class='detail'>{$width}x{$height}</span>", 
				"<span style='display: none;'>$filesize</span>$filesizeStr", 
				implode('<br />', $notes),
				"<label><input type='checkbox' class='delete' name='delete[]' value='$name' /> &nbsp;</label>"
			));
		}

		$form = $this->wire('modules')->get('InputfieldForm');
		$form->attr('id', 'ImageVariations'); 
		$form->action = "./?id={$this->page->id}&file=$pageimage->basename";
		$form->prependMarkup = $table->render();
		
		$submit = $this->wire('modules')->get('InputfieldSubmit');
		$submit->attr('value', $this->_('Delete Checked')); 
		$submit->addClass('delete-checked'); 
		$submit->icon = 'trash';
		$form->add($submit);
		
		$button = $this->wire('modules')->get('InputfieldButton'); 
		$button->attr('value', $this->_('Close')); 
		$button->addClass('pw-modal-cancel'); 
		$button->icon = 'times-circle';
		$form->add($button); 
		
		$this->wire('modules')->get('JqueryMagnific'); 
		
		return "<br />" . $form->render(); 
	}

	/**
	 * Module configuration
	 * 
	 * @param array $data
	 * @return InputfieldWrapper
	 * 
	 */
	static public function getModuleConfigInputfields(array $data) {
		$inputfields = new InputfieldWrapper();
		$data = array_merge(self::$defaultConfig, $data); 
		
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'hidpiDefault'); 
		$f->label = __('HiDPI/Retina checkbox default checked?'); 
		$f->description = __('Check this box to have the HiDPI/Retina checkbox checked by default for newly inserted images.'); 
		if(!empty($data['hidpiDefault'])) $f->attr('checked', 'checked'); 
		$f->columnWidth = 50;
		$inputfields->add($f); 
		
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'noThumbs'); 
		$f->label = __('Do not generate thumbnail images'); 
		$f->description = __('When checked, image selection will use full-size images rather than thumbnail images.'); 
		if(!empty($data['noThumbs'])) $f->attr('checked', 'checked');
		$f->columnWidth = 50;
		$inputfields->add($f); 

		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'skipFields'); 
		$f->attr('value', isset($data['skipFields']) ? $data['skipFields'] : ''); 
		$f->label = __('Field names to skip for selection'); 
		$f->description = __('Enter the names of any image fields (separated by a space) that you do not want to allow for selection with this module.'); 
		$inputfields->add($f); 

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('name', 'noSizeAttrs'); 
		$f->attr('value', 1);
		if(!empty($data['noSizeAttrs'])) $f->attr('checked', 'checked');
		$f->label = __('Skip width attributes on image tags?', __FILE__); // noSizeAttr label
		$f->description = __('By default, this module will include width attributes in the <img> tag. If you are using responsive images, you might want to disable this behavior. Check the box to disable width and height attributes.', __FILE__); // noSizeAttr description
		$f->notes = __('We do not recommend checking this box as it will interfere with some features (like use of HiDPI/retina images).'); 
		$inputfields->add($f);

		$notes = __('Recommended value:') . ' ';
		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'alignLeftClass');
		$f->attr('value', $data['alignLeftClass']); 
		$f->label = __('Align Image Left Class'); 
		$f->notes = $notes . '**align_left**';
		$f->columnWidth = 33; 
		$inputfields->add($f);
		
		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'alignCenterClass');
		$f->attr('value', $data['alignCenterClass']); 
		$f->label = __('Align Image Center Class');
		$f->notes = $notes . '**align_center**';
		$f->columnWidth = 34; 
		$inputfields->add($f);
		
		$f = wire('modules')->get('InputfieldText');
		$f->attr('name', 'alignRightClass');
		$f->attr('value', $data['alignRightClass']);
		$f->label = __('Align Image Right Class');
		$f->notes = $notes . '**align_right**';
		$f->columnWidth = 33;
		$inputfields->add($f);

		return $inputfields;
	}

}

